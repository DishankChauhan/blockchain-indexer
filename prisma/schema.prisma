// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  dbConnections  DatabaseConnection[]
  indexingJobs   IndexingJob[]
  accounts       Account[]
  sessions       Session[]
}

model DatabaseConnection {
  id                String   @id @default(cuid())
  userId           String
  host             String
  port             Int
  database         String
  username         String
  password         String
  status           String   @default("pending") // pending, active, error
  lastConnectedAt  DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  indexingJobs  IndexingJob[]
}

model IndexingJob {
  id                 String   @id @default(cuid())
  userId            String
  dbConnectionId    String
  category          String   // nft_bids, nft_prices, token_borrowing, token_prices
  config            Json     // Specific configuration for the indexing job
  status            String   @default("pending") // pending, active, paused, error
  lastIndexedAt     DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  dbConnection     DatabaseConnection @relation(fields: [dbConnectionId], references: [id], onDelete: Cascade)
}

// NextAuth.js Models
model Account {
  id                 String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId      String
  expires     DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
} 