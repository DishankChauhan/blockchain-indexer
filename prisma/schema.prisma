datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String               @id @default(cuid())
  email              String              @unique
  name               String?
  notifications      Notification[]
  accounts           Account[]
  sessions           Session[]
  dbConnections      DatabaseConnection[]
  indexingJobs       IndexingJob[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([email])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DatabaseConnection {
  id            String        @id @default(cuid())
  userId        String
  host          String
  port          Int
  database      String
  username      String
  password      String
  status        String       @default("pending")
  lastConnectedAt DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  indexingJobs  IndexingJob[]

  @@index([userId])
}

model IndexingJob {
  id               String            @id @default(cuid())
  userId           String
  dbConnectionId   String
  status           String           @default("pending")
  type             String
  config           Json
  lastRunAt        DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  dbConnection     DatabaseConnection @relation(fields: [dbConnectionId], references: [id], onDelete: Cascade)
  webhooks         Webhook[]

  @@index([userId])
  @@index([dbConnectionId])
}

model Notification {
  id             String   @id @default(cuid())
  message        String
  type           String
  userId         String?
  priority       String   @default("medium")
  status         String   @default("pending")
  metadata       Json?    @default("{}")
  deliveryResults Json?   @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model Webhook {
  id              String      @id @default(cuid())
  heliusWebhookId String      @unique
  indexingJobId   String
  secret          String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  indexingJob     IndexingJob @relation(fields: [indexingJobId], references: [id], onDelete: Cascade)

  @@index([indexingJobId])
} 