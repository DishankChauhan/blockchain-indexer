// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  dbConnections DatabaseConnection[]
  indexingJobs  IndexingJob[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DatabaseConnection {
  id           String        @id @default(cuid())
  userId       String
  name         String
  url          String
  status       String        @default("active")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  indexingJobs IndexingJob[]
}

model IndexingJob {
  id                String            @id @default(cuid())
  userId           String
  dbConnectionId   String
  status           String            @default("active")
  config           Json
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  dbConnection     DatabaseConnection @relation(fields: [dbConnectionId], references: [id], onDelete: Cascade)
  webhooks         Webhook[]
}
model Webhook {
  id              String      @id @default(cuid())
  heliusWebhookId String      @unique
  indexingJobId   String
  secret          String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  indexingJob     IndexingJob @relation(fields: [indexingJobId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String?
  type      String   // error, warning, info, success
  message   String
  priority  String   // high, medium, low
  channel   String[] // email, webhook, database
  metadata  Json?
  status    String   @default("unread")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NotificationWebhook {
  id        String   @id @default(cuid())
  userId    String
  url       String
  secret    String
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 
